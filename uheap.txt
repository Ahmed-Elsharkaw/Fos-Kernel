
#include <inc/lib.h>

// malloc()
//	This function use NEXT FIT strategy to allocate space in heap
//  with the given size and return void pointer to the start of the allocated space

//	To do this, we need to switch to the kernel, allocate the required space
//	in Page File then switch back to the user again.
//
//	We can use sys_allocateMem(uint32 virtual_address, uint32 size); which
//		switches to the kernel mode, calls allocateMem(struct Env* e, uint32 virtual_address, uint32 size) in
//		"memory_manager.c", then switch back to the user mode here
//	the allocateMem function is empty, make sure to implement it.


//==================================================================================//
//============================ REQUIRED FUNCTIONS ==================================//
//==================================================================================//

int S=0;
int ckeck=0;
int arr[((USER_HEAP_MAX-USER_HEAP_START))/PAGE_SIZE];
struct map
{
	uint32 address;
	uint32 size;

};
struct map heap_data_arr[((USER_HEAP_MAX-USER_HEAP_START))/PAGE_SIZE];

uint32 *X=(uint32*)USER_HEAP_START;
void just_for_help()
{
	int i=USER_HEAP_START;
	while(i<USER_HEAP_MAX)
	{
		arr[S]=0;
		  S++;
		i+=PAGE_SIZE;
	}
S--;
}
int temp=0;
void* malloc(uint32 size)
{
	uint32 Free_Area=0;
	int there_exist_1=0;
	int there_exist_2=0;
	int counter=0;
	uint32 NEXT_ADD;
	if(ckeck==0)
	{
		ckeck=1;
		just_for_help();

	}
uint32 FOR_MYLOOP=(uint32)X;
while(FOR_MYLOOP<USER_HEAP_MAX)
{
	int index=(FOR_MYLOOP-USER_HEAP_START)/PAGE_SIZE;
        if(arr[index]==0)
        {
          Free_Area+=PAGE_SIZE;
		counter++;
        }
	else
	{
		//int Free_Area=counter*PAGE_SIZE;
		if(Free_Area>=size)
		{
				break;
		}
        Free_Area=0;
		counter=0;
	}

        FOR_MYLOOP+=PAGE_SIZE;
}

//uint32 Free_Area= counter *PAGE_SIZE;

if(Free_Area  >= size)
{
	NEXT_ADD=(FOR_MYLOOP)-(counter*PAGE_SIZE);
	there_exist_1=1;

}
if(there_exist_1==1)
{
  goto end;
}
else
{
		counter=0;
		Free_Area=0;
         goto second_loop;

}
uint32 j;

second_loop:
for( j=0;j<(uint32)X;j+=PAGE_SIZE)
{
	int index=(j-USER_HEAP_START)/PAGE_SIZE;

   if(arr[index]==0)
	{
       	 Free_Area+=PAGE_SIZE;
		counter++;
	}
	else
	{
		if(Free_Area>=size)
		{
			break;
		}
		counter=0;
		Free_Area=0;
	}
}

//Free_Area= counter *PAGE_SIZE;
if(Free_Area  >= size)
{
	int S_SIZE=counter*PAGE_SIZE;
	NEXT_ADD=(j)-(S_SIZE);
	there_exist_1=1;
}
if(there_exist_1==1)
{
  goto end;
}
if(there_exist_1 == 0)
{
  return NULL;

}

end:
sys_allocateMem(NEXT_ADD,ROUNDUP(size,PAGE_SIZE));
heap_data_arr[temp].size=ROUNDUP(size,PAGE_SIZE);
heap_data_arr[temp].address=NEXT_ADD;
int ind=(NEXT_ADD-USER_HEAP_START)/PAGE_SIZE;
int number_of_pages2=ROUNDUP(size,PAGE_SIZE)/PAGE_SIZE;
int i=0;
while(i<number_of_pages2)
{
	arr[ind]=	1;
	ind+=1;
	i++;
}
temp++;
uint32 TOT_END = NEXT_ADD+size;
X=(uint32*)(ROUNDUP(TOT_END,PAGE_SIZE));
return (void *)NEXT_ADD;
}

void* smalloc(char *sharedVarName, uint32 size, uint8 isWritable)
{
	panic("smalloc() is not required ..!!");
	return NULL;
}

void* sget(int32 ownerEnvID, char *sharedVarName)
{
	panic("sget() is not required ..!!");
	return 0;
}

// free():
//	This function frees the allocation of the given virtual_address
//	To do this, we need to switch to the kernel, free the pages AND "EMPTY" PAGE TABLES
//	from page file and main memory then switch back to the user again.
//
//	We can use sys_freeMem(uint32 virtual_address, uint32 size); which
//		switches to the kernel mode, calls freeMem(struct Env* e, uint32 virtual_address, uint32 size) in
//		"memory_manager.c", then switch back to the user mode here
//	the freeMem function is empty, make sure to implement it.

void free(void* virtual_address)
{
	int i=0;
	int my_index;
	// 12 KB
	// 3 pages + address free(VA)
	// address + size
	// temp =====> Last Postion;
	while(i<temp)
	{// address
		// size
		if((void *)heap_data_arr[i].address==virtual_address)
		{
			my_index=i;
			break;
		}


		i++;
	}
	//12 kB /4 KB=3
	int number=heap_data_arr[my_index].size/PAGE_SIZE;//numnber of pages
	sys_freeMem((uint32)virtual_address,(heap_data_arr[my_index].size));
	// To Know Size of this process
	//number of pages per process
	uint32 var=(uint32)(virtual_address-USER_HEAP_START)/PAGE_SIZE;
	for(int i=0;i<number;i++)
	{
		arr[var]=0;
		var++;

	}
	heap_data_arr[my_index ]=heap_data_arr[temp-1];
	temp--;
}


void sfree(void* virtual_address)
{
	panic("sfree() is not requried ..!!");
}


//===============
// [2] realloc():
//===============

//	Attempts to resize the allocated space at "virtual_address" to "new_size" bytes,
//	possibly moving it in the heap.
//	If successful, returns the new virtual_address, in which case the old virtual_address must no longer be accessed.
//	On failure, returns a null pointer, and the old virtual_address remains valid.

//	A call with virtual_address = null is equivalent to malloc().
//	A call with new_size = zero is equivalent to free().

//  Hint: you may need to use the sys_moveMem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
//		which switches to the kernel mode, calls moveMem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
//		in "memory_manager.c", then switch back to the user mode here
//	the moveMem function is empty, make sure to implement it.

void *realloc(void *virtual_address, uint32 new_size)
{
	//TODO: [PROJECT 2022 - BONUS3] User Heap Realloc [User Side]
	// Write your code here, remove the panic and write your code
	panic("realloc() is not implemented yet...!!");

	return NULL;
}
